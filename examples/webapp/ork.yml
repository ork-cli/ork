version: "1.0"
project: webapp

services:
  # Frontend - using a pre-built Docker image
  frontend:
    image: nginx:alpine
    ports:
      - "3000:80"
    depends_on:
      - api
    env:
      API_URL: http://localhost:8080
    health:
      endpoint: /
      interval: 5s
      timeout: 3s
      retries: 3

  # API - would be cloned from git (example)
  api:
    image: node:18-alpine
    command: [ "node", "-e", "require('http').createServer((req,res)=>res.end('OK')).listen(8080)" ]
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
    env:
      # Database connection details
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_USER: postgres
      DB_PASSWORD: test
      DB_NAME: webapp
      # Variable interpolation examples
      DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      # Redis connection with default values
      REDIS_HOST: redis
      REDIS_URL: redis://${REDIS_HOST}:${REDIS_PORT:-6379}
      # API configuration
      API_PORT: "8080"
      API_BASE_URL: http://localhost:${API_PORT}
    health:
      endpoint: /
      interval: 5s
      timeout: 3s
      retries: 3

  # Postgres database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    env:
      POSTGRES_PASSWORD: test
      POSTGRES_DB: webapp
    # No health check - database doesn't expose HTTP endpoint

  # Redis cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    # No health check - redis doesn't expose an HTTP endpoint
